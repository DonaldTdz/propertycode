<#@ template language="C#" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Xml"#>
<#@ import namespace="System.Xml" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="TemplateFileManagerV2.1.ttinclude" #>
<# 
	var manager = TemplateFileManager.Create(this);
	string strProjectName = "PropertyMgr";
#>
<#
	EnvDTE.DTE dte = (EnvDTE.DTE) ((IServiceProvider) this.Host).GetService(typeof(EnvDTE.DTE));
	XmlDocument doc = new XmlDocument();
	var strProjectPath = dte.ActiveDocument.Path;
	var strSolutionPath = strProjectPath.Substring(0, strProjectPath.IndexOf("src") + 3);
	var strTemplateFilePath = System.IO.Path.Combine(strSolutionPath, @"YK.PropertyMgr.MVCWeb\Models\PropertyMgrTemplate.xml");
	doc.Load(strTemplateFilePath);
	var oAProjectTemplateNodes = doc.SelectNodes("/FrameworkTemplates/FrameworkTemplate[@Type='DomainEntity']");
	foreach (XmlNode templateNode in oAProjectTemplateNodes)
	{
	manager.StartNewFile(templateNode.Attributes["Name"].Value + "Repository.cs");
#>
using YK.<#= strProjectName #>.DomainEntity;
using YK.<#= strProjectName #>.RepositoryContract;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace YK.<#= strProjectName #>.Repository
{
    public partial class <#= templateNode.Attributes["Name"].Value #>Repository: <#= strProjectName #>Repository<<#= templateNode.Attributes["Name"].Value #>>, I<#= templateNode.Attributes["Name"].Value #>Repository
    {
        public <#= templateNode.Attributes["Name"].Value #>Repository(<#= strProjectName #>DataBaseContext context)
            : base(context)
        {
        }

        public override string TableName
        {
            get
            {
                return "<#= templateNode.Attributes["DataTableName"].Value #>";
            }
        }
    }
}

<#
    }
	manager.Process();
#>

