<#@ template language="C#" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Xml"#>
<#@ import namespace="System.Xml" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ include file="TemplateFileManagerV2.1.ttinclude" #>
<# 
	var manager = TemplateFileManager.Create(this);
	string strProjectName = "PropertyMgr";
#>
<#
	EnvDTE.DTE dte = (EnvDTE.DTE) ((IServiceProvider) this.Host).GetService(typeof(EnvDTE.DTE));
	XmlDocument doc = new XmlDocument();
	var strProjectPath = dte.ActiveDocument.Path;
	var strSolutionPath = strProjectPath.Substring(0, strProjectPath.IndexOf("src") + 3);
	var strTemplateFilePath = System.IO.Path.Combine(strSolutionPath, @"YK.PropertyMgr.MVCWeb\Models\PropertyMgrTemplate.xml");
	doc.Load(strTemplateFilePath);
	var oAProjectTemplateNodes = doc.SelectNodes("/FrameworkTemplates/FrameworkTemplate[@Type='DomainEntity']");
	manager.StartNewFile(strProjectName + "MapperCollection.cs");
#>
using KW.Sprite.Common.Repository;
using YK.<#= strProjectName #>.DomainEntity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace YK.<#= strProjectName #>.Repository
{
    public class <#= strProjectName #>MapperCollection : IMapperCollection
    {
        public IEnumerable<IEntityMapper> Mappers { get; private set; }

        public <#= strProjectName #>MapperCollection()
        {
            Mappers = new List<IEntityMapper>
            {
<#
	foreach (XmlNode templateNode in oAProjectTemplateNodes)
	{
#>
                new <#= templateNode.Attributes["Name"].Value #>Mapper(),
<# 
	}
#>
            };
        }
    }
}
<#
	manager.Process();
#>

